function [allData, scenario, sensors] = generateSensorData()
%generateSensorData - Returns sensor detections
%    allData = generateSensorData returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = generateSensorData optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.11 (R2021b) and Automated Driving Toolbox 3.4 (R2021b).
% Generated on: 17-Aug-2022 19:14:20

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    % Get the state of the ego vehicle
    actorState = state(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [0 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{5} = visionDetectionGenerator('SensorIndex', 5, ...
    'SensorLocation', [0 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{6} = visionDetectionGenerator('SensorIndex', 6, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{7} = visionDetectionGenerator('SensorIndex', 7, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{8} = visionDetectionGenerator('SensorIndex', 8, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{9} = visionDetectionGenerator('SensorIndex', 9, ...
    'SensorLocation', [1.5 0], ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{10} = visionDetectionGenerator('SensorIndex', 10, ...
    'SensorLocation', [0.84 0.01], ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{11} = drivingRadarDataGenerator('SensorIndex', 11, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{12} = drivingRadarDataGenerator('SensorIndex', 12, ...
    'MountingLocation', [2.8 0.9 0.2], ...
    'MountingAngles', [90 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{13} = drivingRadarDataGenerator('SensorIndex', 13, ...
    'MountingLocation', [2.8 -0.9 0.2], ...
    'MountingAngles', [-90 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{14} = drivingRadarDataGenerator('SensorIndex', 14, ...
    'MountingLocation', [0 -0.9 0.2], ...
    'MountingAngles', [-90 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{15} = lidarPointCloudGenerator('SensorIndex', 15, ...
    'SensorLocation', [-0.11 0.9], ...
    'Yaw', 90, ...
    'ActorProfiles', profiles);
sensors{16} = drivingRadarDataGenerator('SensorIndex', 16, ...
    'MountingLocation', [-1 0 0.2], ...
    'MountingAngles', [-180 0 0], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{17} = drivingRadarDataGenerator('SensorIndex', 17, ...
    'MountingLocation', [0 0.9 0.2], ...
    'MountingAngles', [90 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{18} = drivingRadarDataGenerator('SensorIndex', 18, ...
    'MountingLocation', [0 0 0.2], ...
    'MountingAngles', [-180 0 0], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{19} = drivingRadarDataGenerator('SensorIndex', 19, ...
    'MountingLocation', [0.95 0 0.2], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{20} = drivingRadarDataGenerator('SensorIndex', 20, ...
    'MountingLocation', [1.63 0.03 0.2], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{21} = drivingRadarDataGenerator('SensorIndex', 21, ...
    'MountingLocation', [0.95 0 0.2], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{22} = drivingRadarDataGenerator('SensorIndex', 22, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{23} = lidarPointCloudGenerator('SensorIndex', 23, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'AzimuthLimits', [-10 10], ...
    'ActorProfiles', profiles);
sensors{24} = lidarPointCloudGenerator('SensorIndex', 24, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'AzimuthLimits', [-45 45], ...
    'ActorProfiles', profiles);
sensors{25} = lidarPointCloudGenerator('SensorIndex', 25, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'AzimuthLimits', [-45 45], ...
    'ActorProfiles', profiles);
sensors{26} = lidarPointCloudGenerator('SensorIndex', 26, ...
    'SensorLocation', [0 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'AzimuthLimits', [-45 45], ...
    'ActorProfiles', profiles);
sensors{27} = lidarPointCloudGenerator('SensorIndex', 27, ...
    'SensorLocation', [0 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'AzimuthLimits', [-45 45], ...
    'ActorProfiles', profiles);
sensors{28} = lidarPointCloudGenerator('SensorIndex', 28, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'ActorProfiles', profiles);
sensors{29} = lidarPointCloudGenerator('SensorIndex', 29, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'AzimuthLimits', [-10 10], ...
    'ActorProfiles', profiles);
sensors{30} = insSensor('TimeInput', true, ...
    'MountingLocation', [3.7 0 0]);
sensors{31} = insSensor('TimeInput', true, ...
    'MountingLocation', [2.8 0.9 0]);
sensors{32} = insSensor('TimeInput', true, ...
    'MountingLocation', [2.8 -0.9 0]);
sensors{33} = insSensor('TimeInput', true, ...
    'MountingLocation', [0 0.9 0]);
sensors{34} = insSensor('TimeInput', true, ...
    'MountingLocation', [0 -0.9 0]);
sensors{35} = insSensor('TimeInput', true, ...
    'MountingLocation', [-1 0 0]);
numSensors = 35;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [-102 151 0;
    135 152 0;
    135 -155 0;
    -100 -155 0;
    -102 151 0];
laneSpecification = lanespec(4, 'Width', 9.9625);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [19.1 186.2 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [19.1 186.2 0;
    77.4 178.5 0;
    118.5 156.2 0;
    152.8 130.5 0;
    173.4 86.8 0;
    194.8 60.2 0;
    204.2 7.1 0;
    203.4 -34.9 0;
    182.8 -94.9 0;
    141.7 -146.3 0;
    97.1 -184 0;
    27.7 -200.3 0;
    -28 -196 0;
    -94 -169.4 0;
    -169.4 -76.9 0;
    -169.4 -20.3 0;
    -161.7 0.2 0;
    -154.8 49.1 0;
    -134.3 91.9 0;
    -127.4 119.4 0;
    -119.7 137.3 0;
    -87.1 164.8 0;
    -46 187 0;
    1.1 197.3 0;
    28.6 206.8 0;
    64.6 202.5 0;
    100.5 190.5 0;
    140 169.1 0;
    148.5 146.8 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
smoothTrajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [24.3 175.9 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
waypoints = [24.3 175.9 0;
    52.6 173.3 0;
    75.7 166.5 0;
    90.3 159.6 0;
    107.4 152.8 0;
    122.8 143.3 0;
    150.2 119.4 0;
    158.8 106.5 0;
    177.7 100.5 0;
    206.8 67.9 0;
    221.4 52.5 0;
    224.8 -15.2 0;
    211.9 -78.6 0;
    183.7 -128.3 0;
    140 -172.9 0;
    103.1 -192.6 0;
    49.1 -210.6 0;
    -21.1 -209.7 0;
    -67.4 -194.3 0;
    -126.5 -158.3 0;
    -149.7 -64.9 0;
    -166 -48.6 0;
    -190.8 -15.2 0;
    -186.5 41.4 0;
    -173.7 81.6 0;
    -137.7 138.2 0;
    -97.4 172.5 0;
    -55.4 193.9 0;
    -7.4 207.6 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(car1, waypoints, speed);

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [19.1 196.5 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');
waypoints = [19.1 196.5 0;
    90.3 185.3 0;
    125.4 166.5 0;
    154.5 155.3 0;
    184.5 121.1 0;
    208.5 87.6 0;
    196.5 75.7 0;
    212.8 34.5 0;
    215.4 -1.5 0;
    214.5 -31.5 0;
    194.8 -89.7 0;
    165.7 -131.7 0;
    136.5 -135.2 0;
    89.4 -166.9 0;
    49.1 -177.1 0;
    -0.6 -182.3 0;
    -46.8 -171.1 0;
    -89.7 -148.9 0;
    -124 -117.2 0;
    -150.5 -87.2 0;
    -160.8 -69.2 0;
    -158.2 -28 0;
    -160.8 -16.9 0;
    -179.7 7.1 0;
    -174.5 43.9 0;
    -164.2 77.4 0;
    -146.3 109.9 0;
    -137.7 123.6 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(truck, waypoints, speed);

bicycle = actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [159.7 135.6 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle');
waypoints = [159.7 135.6 0;
    175.9 115.1 0;
    188.8 98.8 0;
    215.4 68.8 0;
    208.5 48.2 0;
    191.4 29.4 0;
    194.8 -19.5 0;
    187.1 -53.7 0;
    163.1 -102.6 0;
    142.5 -129.2 0;
    113.4 -151.4 0;
    69.7 -173.7 0;
    28.6 -179.7 0;
    -11.7 -178.9 0;
    -39.1 -173.7 0;
    -66.6 -160.9 0;
    -104.3 -136.9 0;
    -131.7 -102.6 0;
    -142 -82.9 0];
speed = [5;5;5;5;5;5;5;5;5;5;5;5;5;5;5;5;5;5;5];
trajectory(bicycle, waypoints, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

